!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.8	//
LOG	test.c	28;"	d	file:
TEST_TYPE_0	test.c	17;"	d	file:
TEST_TYPE_1	test.c	18;"	d	file:
TEST_TYPE_2	test.c	19;"	d	file:
TEST_TYPE_3	test.c	20;"	d	file:
TEST_TYPE_4	test.c	21;"	d	file:
TEST_TYPE_5	test.c	22;"	d	file:
TEST_TYPE_6	test.c	23;"	d	file:
TEST_TYPE_7	test.c	24;"	d	file:
TEST_TYPE_8	test.c	25;"	d	file:
TEST_TYPE_9	test.c	26;"	d	file:
_KEY_LIST_H_	key_list.h	14;"	d
_TLV_BOX_H_	tlv_box.h	14;"	d
_tlv	tlv_box.h	/^typedef struct _tlv {$/;"	s
_tlv_box	tlv_box.h	/^typedef struct _tlv_box {$/;"	s
_value	key_list.h	/^typedef struct _value {$/;"	s
count	key_list.h	/^    int count;$/;"	m	struct:key_list
header	key_list.h	/^    key_list_node_t *header;      $/;"	m	struct:key_list
key	key_list.h	/^    key_t key;$/;"	m	struct:key_list_node
key_compare	key_list.h	25;"	d
key_list	key_list.h	/^typedef struct key_list {$/;"	s
key_list_add	key_list.c	/^int key_list_add(key_list_t *list, key_t key, value_t value)$/;"	f
key_list_count	key_list.c	/^int key_list_count(key_list_t *list) $/;"	f
key_list_create	key_list.c	/^key_list_t *key_list_create(value_releaser releaser) $/;"	f
key_list_delete	key_list.c	/^int key_list_delete(key_list_t *list, key_t key) $/;"	f
key_list_destroy	key_list.c	/^int key_list_destroy(key_list_t *list) $/;"	f
key_list_edit	key_list.c	/^int key_list_edit(key_list_t *list, key_t key, value_t value)$/;"	f
key_list_find_key	key_list.c	/^int key_list_find_key(key_list_t *list, key_t key) $/;"	f
key_list_foreach	key_list.h	52;"	d
key_list_get	key_list.c	/^int key_list_get(key_list_t *list, key_t key, value_t *value) $/;"	f
key_list_get_node	key_list.c	/^static key_list_node_t* key_list_get_node(key_list_t *list, key_t key) $/;"	f	file:
key_list_keyset	key_list.c	/^int key_list_keyset(key_list_t *list, key_t* array, int array_size)$/;"	f
key_list_node	key_list.h	/^typedef struct key_list_node { $/;"	s
key_list_node_t	key_list.h	/^} key_list_node_t;$/;"	t	typeref:struct:key_list_node
key_list_remove_node	key_list.c	/^static int key_list_remove_node(key_list_t *list, key_list_node_t *node) $/;"	f	file:
key_list_t	key_list.h	/^} key_list_t;$/;"	t	typeref:struct:key_list
key_t	key_list.h	/^typedef int key_t;$/;"	t
length	tlv_box.h	/^    int length;$/;"	m	struct:_tlv
m_list	tlv_box.h	/^    key_list_t *m_list;$/;"	m	struct:_tlv_box
m_serialized_buffer	tlv_box.h	/^    unsigned char *m_serialized_buffer;$/;"	m	struct:_tlv_box
m_serialized_bytes	tlv_box.h	/^    int m_serialized_bytes;$/;"	m	struct:_tlv_box
main	test.c	/^int main(int argc, char const *argv[])$/;"	f
next	key_list.h	/^    struct key_list_node *next;$/;"	m	struct:key_list_node	typeref:struct:key_list_node::key_list_node
prev	key_list.h	/^    struct key_list_node *prev;$/;"	m	struct:key_list_node	typeref:struct:key_list_node::key_list_node
releaser	key_list.h	/^    value_releaser releaser;$/;"	m	struct:key_list
tlv_box_create	tlv_box.c	/^tlv_box_t *tlv_box_create()$/;"	f
tlv_box_destroy	tlv_box.c	/^int tlv_box_destroy(tlv_box_t *box)$/;"	f
tlv_box_get_buffer	tlv_box.c	/^unsigned char *tlv_box_get_buffer(tlv_box_t *box)$/;"	f
tlv_box_get_bytes	tlv_box.c	/^int tlv_box_get_bytes(tlv_box_t *box, int type, unsigned char *value, int* length)$/;"	f
tlv_box_get_bytes_ptr	tlv_box.c	/^int tlv_box_get_bytes_ptr(tlv_box_t *box, int type, unsigned char **value, int* length)$/;"	f
tlv_box_get_char	tlv_box.c	/^int tlv_box_get_char(tlv_box_t *box, int type, char *value)$/;"	f
tlv_box_get_double	tlv_box.c	/^int tlv_box_get_double(tlv_box_t *box, int type, double *value)$/;"	f
tlv_box_get_float	tlv_box.c	/^int tlv_box_get_float(tlv_box_t *box, int type, float *value)$/;"	f
tlv_box_get_int	tlv_box.c	/^int tlv_box_get_int(tlv_box_t *box, int type, int *value)$/;"	f
tlv_box_get_long	tlv_box.c	/^int tlv_box_get_long(tlv_box_t *box, int type, long *value)$/;"	f
tlv_box_get_longlong	tlv_box.c	/^int tlv_box_get_longlong(tlv_box_t *box, int type, long long *value)$/;"	f
tlv_box_get_object	tlv_box.c	/^int tlv_box_get_object(tlv_box_t *box, int type, tlv_box_t **object)$/;"	f
tlv_box_get_short	tlv_box.c	/^int tlv_box_get_short(tlv_box_t *box, int type, short *value)$/;"	f
tlv_box_get_size	tlv_box.c	/^int tlv_box_get_size(tlv_box_t *box)$/;"	f
tlv_box_get_string	tlv_box.c	/^int tlv_box_get_string(tlv_box_t *box, int type, char *value, int* length)$/;"	f
tlv_box_parse	tlv_box.c	/^tlv_box_t *tlv_box_parse(unsigned char *buffer, int buffersize)$/;"	f
tlv_box_put_bytes	tlv_box.c	/^int tlv_box_put_bytes(tlv_box_t *box, int type, unsigned char *value, int length)$/;"	f
tlv_box_put_char	tlv_box.c	/^int tlv_box_put_char(tlv_box_t *box, int type, char value)$/;"	f
tlv_box_put_double	tlv_box.c	/^int tlv_box_put_double(tlv_box_t *box, int type, double value)$/;"	f
tlv_box_put_float	tlv_box.c	/^int tlv_box_put_float(tlv_box_t *box, int type, float value)$/;"	f
tlv_box_put_int	tlv_box.c	/^int tlv_box_put_int(tlv_box_t *box, int type, int value)$/;"	f
tlv_box_put_long	tlv_box.c	/^int tlv_box_put_long(tlv_box_t *box, int type, long value)$/;"	f
tlv_box_put_longlong	tlv_box.c	/^int tlv_box_put_longlong(tlv_box_t *box, int type, long long value)$/;"	f
tlv_box_put_object	tlv_box.c	/^int tlv_box_put_object(tlv_box_t *box, int type, tlv_box_t *object)$/;"	f
tlv_box_put_short	tlv_box.c	/^int tlv_box_put_short(tlv_box_t *box, int type, short value)$/;"	f
tlv_box_put_string	tlv_box.c	/^int tlv_box_put_string(tlv_box_t *box, int type, char *value)$/;"	f
tlv_box_putobject	tlv_box.c	/^int tlv_box_putobject(tlv_box_t *box, int type, void *value, int length)$/;"	f
tlv_box_release_tlv	tlv_box.c	/^static void tlv_box_release_tlv(value_t value)$/;"	f	file:
tlv_box_serialize	tlv_box.c	/^int tlv_box_serialize(tlv_box_t *box)$/;"	f
tlv_box_t	tlv_box.h	/^} tlv_box_t;$/;"	t	typeref:struct:_tlv_box
tlv_t	tlv_box.h	/^} tlv_t;$/;"	t	typeref:struct:_tlv
type	tlv_box.h	/^    int type;$/;"	m	struct:_tlv
value	key_list.h	/^    value_t value;$/;"	m	struct:key_list_node
value	key_list.h	/^    void *value;$/;"	m	struct:_value
value	tlv_box.h	/^    unsigned char *value;$/;"	m	struct:_tlv
value_releaser	key_list.h	/^typedef void (*value_releaser)(value_t value);$/;"	t
value_t	key_list.h	/^} value_t;$/;"	t	typeref:struct:_value
